#!/bin/bash

# Loads and validates the config file, generates the user routes and then starts
# the webserver.

# Copyright 2020 Google LLC.
# SPDX-License-Identifier: Apache-2.0

die () { echo "$@" >&2; trap - EXIT; exit 1; }
set -e
trap 'die "Error executing start script"' EXIT

# Should be set by the base image
[[ -d "$HTTPD_PREFIX" ]] \
  || die '$HTTPD_PREFIX not set'

set -a
. /etc/config
set +a

[[ "$PORT" -gt 0 ]] \
  || die '$PORT is invalid'

webdav_data_dir="$WEBDAV_BASE/$WEBDAV_DATA"

# Verify that the files and directories in the config are valid
[[ -d "$webdav_data_dir" ]] \
  || die '$WEBDAV_DATA set to invalid directory'
[[ -f "$WEBDAV_USERS" ]] \
  || die '$WEBDAV_USERS set to invalid file'
[[ -f "$WEBDAV_SSL_CERT" ]] \
  || die '$WEBDAV_SSL_CERT set to invalid file'
[[ -f "$WEBDAV_SSL_CERT_KEY" ]] \
  || die '$WEBDAV_SSL_CERT_KEY set to invalid file'

# Config defaults
[[ "$WEBDAV_USER_ID" -gt 0 ]] \
  || export WEBDAV_USER_ID=1000
[[ "$WEBDAV_GROUP_ID" -gt 0 ]] \
  || export WEBDAV_GROUP_ID=1000
[[ -n "$WEBDAV_CONFIG" ]] \
  || export WEBDAV_CONFIG="$HTTPD_PREFIX/conf/webdav.conf"
[[ -n "$WEBDAV_USERS_CONFIG" ]] \
  || export WEBDAV_USERS_CONFIG="$HTTPD_PREFIX/conf/webdav_users.conf"
[[ -n "$WEBDAV_LOCKFILE" ]] \
  || export WEBDAV_LOCKFILE="/etc/lock/lockfile"

# Create user (if needed)
if ! id webdav &> /dev/null; then
  grep -q ":$WEBDAV_GROUP_ID:" /etc/group \
    || addgroup --gid "$WEBDAV_GROUP_ID" group
  adduser --uid "$WEBDAV_USER_ID" webdav \
    --gecos "" --disabled-password --no-create-home --ingroup group
fi

# Generate the users config that rules for each user's directory
truncate -s 0 "$WEBDAV_USERS_CONFIG"
for user in $(grep -o '^[^:]\+' "$WEBDAV_USERS"); do
  if [[ "$user" == "$WEBDAV_SUPERUSER" ]]; then
    found_superuser=1
  elif [[ "$user" == "$WEBDAV_RO_USER" ]]; then
    found_ro_user=1
  elif [[ "$user" == "$WEBDAV_RADICALE_USER" ]]; then
    found_radicale_user=1
  else
    printf 'Use UserDir %s\n' "$user" >> "$WEBDAV_USERS_CONFIG"
    mkdir -p "$webdav_data_dir/$user"
  fi
done

# If WEBDAV_SUPERUSER is set, it must be a real user
if [[ -n "$WEBDAV_SUPERUSER" ]]; then
  [[ -n "$found_superuser" ]] \
    || die '$WEBDAV_SUPERUSER not found in users'
  export WEBDAV_FLAG_SUPERUSER=1
fi
# If WEBDAV_RO_USER is set, it must be a real user
if [[ -n "$WEBDAV_RO_USER" ]]; then
  [[ -n "$found_ro_user" ]] \
    || die '$WEBDAV_RO_USER not found in users'
  export WEBDAV_FLAG_RO_USER=1
fi
# If WEBDAV_PUBLIC is set, make sure it exists
if [[ -n "$WEBDAV_PUBLIC" ]]; then
  export WEBDAV_FLAG_PUBLIC=1
  mkdir -p "$webdav_data_dir/$WEBDAV_PUBLIC"
fi
# If WEBDAV_RADICALE_USER is set, make sure it exists
if [[ -n "$WEBDAV_RADICALE_USER" ]]; then
  [[ -n "$found_radicale_user" ]] \
    || die '$WEBDAV_RADICALE not found in users'
  export WEBDAV_FLAG_RADICALE_USER=1
fi

if [[ -n "$WEBDAV_RADICALE" && -f "$HTTPD_PREFIX/modules/mod_wsgi.so" ]]; then
  [[ -n "$WEBDAV_RADICALE_STORAGE" ]] \
    || die '$WEBDAV_RADICALE_STORAGE must be set when $WEBDAV_RADICALE is set'

  export RADICALE_CONFIG="/etc/radicale.conf"
  radicale_path="$webdav_data_dir/$WEBDAV_RADICALE"
  radicale_storage="$webdav_data_dir/$WEBDAV_RADICALE_STORAGE"
  if [[ -d "$radicale_path" ]] && ! rmdir "$radicale_path"; then
    die '$WEBDAV_RADICALE must be empty'
  fi
  mkdir -p "$radicale_path" "$radicale_storage"
  printf '[auth]\ntype = remote_user\n[storage]\nfilesystem_folder = %s\n' \
     "$radicale_storage" \
     > $RADICALE_CONFIG
  if [[ -z "$WEBDAV_FLAG_RADICALE_WEB" ]]; then
    printf '[web]\ntype = none\n' >> $RADICALE_CONFIG
  fi
  printf 'from radicale import application\n' > "$WEBDAV_BASE/radicale.wsgi"
  export WEBDAV_FLAG_RADICALE=1
fi

# Create the required directories and set permissions
lockfile_dir="$(dirname $WEBDAV_LOCKFILE)"
mkdir -p "$lockfile_dir"
chown -R "$WEBDAV_USER_ID" "$webdav_data_dir" "$lockfile_dir"
chmod -R u+rwx "$webdav_data_dir" "$lockfile_dir"

# Pass all exports that start with WEBDAV_FLAG_ as parameters to make them
# accessible from <IfDefine> in Apache config
flags=$(env | grep -o '^WEBDAV_FLAG_[^=]\+' | xargs printf '-D%s ')
httpd-foreground $flags
trap - EXIT
